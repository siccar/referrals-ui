@using OpenReferralPOV.Data


<div id="service-availability">
    <div class="service top">
        <label>Service availability</label>
        <span><i class="far fa-calendar-alt fa-3x"></i></span>
    </div>
    <div class="dayofweek">
        <div class="day">Sunday</div>
        <div class="times">
            <input type="checkbox" class="switch" checked="@WeekdayIsOpen("Sunday")"
                   @onchange="@((ChangeEventArgs __e) => HandleCheckboxChange("Sunday", __e.Value))">
            <div class="hours">
                <span>
                    <input type="number" size="2" min="0" max="23" maxlength="2" value="@GetOpeningTime("Sunday")"
                           @onchange="@((ChangeEventArgs __e) => SetOpeningTime("Sunday", __e.Value))" />
                    : <input type="text" size="2" maxlength="2" value="00" disabled/>
                </span>
                TO
                <span>
                    <input type="number" size="2" min="0" max="23" maxlength="2" value="@GetClosingTime("Sunday")"
                           @onchange="@((ChangeEventArgs __e) => SetClosingTime("Sunday", __e.Value))" />
                    : <input type="text" size="2" maxlength="2" value="00" disabled/>
                </span>
            </div>
        </div>
    </div>

    <div class="dayofweek">
        <div class="day">Monday</div>
        <div class="times">
            <input type="checkbox" class="switch" checked="@WeekdayIsOpen("Monday")"
                   @onchange="@((ChangeEventArgs __e) => HandleCheckboxChange("Monday", __e.Value))">
            <div class="hours">
                <span>
                    <input type="number" size="2" min="0" max="23" maxlength="2" value="@GetOpeningTime("Monday")"
                           @onchange="@((ChangeEventArgs __e) => SetOpeningTime("Monday", __e.Value))" />
                    : <input type="text" size="2" maxlength="2" value="00" disabled/>
                </span>
                TO
                <span>
                    <input type="number" size="2" min="0" max="23" maxlength="2" value="@GetClosingTime("Monday")"
                           @onchange="@((ChangeEventArgs __e) => SetClosingTime("Monday", __e.Value))" />
                    : <input type="text" size="2" maxlength="2" value="00" disabled />
                </span>
            </div>
        </div>
    </div>

    <div class="dayofweek">
        <div class="day">Tuesday</div>
        <div class="times">
            <input type="checkbox" class="switch" checked="@WeekdayIsOpen("Tuesday")"
                   @onchange="@((ChangeEventArgs __e) => HandleCheckboxChange("Tuesday", __e.Value))">
            <div class="hours">
                <span>
                    <input type="number" size="2" min="0" max="23" maxlength="2" value="@GetOpeningTime("Tuesday")"
                           @onchange="@((ChangeEventArgs __e) => SetOpeningTime("Tuesday", __e.Value))" />
                    : <input type="text" size="2" maxlength="2" value="00" disabled/>
                </span>
                TO
                <span>
                    <input type="number" size="2" min="0" max="23" maxlength="2" value="@GetClosingTime("Tuesday")"
                           @onchange="@((ChangeEventArgs __e) => SetClosingTime("Tuesday", __e.Value))" />
                    : <input type="text" size="2" maxlength="2" value="00" disabled/>
                </span>
            </div>
        </div>
    </div>

    <div class="dayofweek">
        <div class="day">Wednesday</div>
        <div class="times">
            <input type="checkbox" class="switch" checked="@WeekdayIsOpen("Wednesday")"
                   @onchange="@((ChangeEventArgs __e) => HandleCheckboxChange("Wednesday", __e.Value))">
            <div class="hours">
                <span>
                    <input type="number" size="2" min="0" max="23" maxlength="2" value="@GetOpeningTime("Wednesday")"
                           @onchange="@((ChangeEventArgs __e) => SetOpeningTime("Wednesday", __e.Value))" />
                    : <input type="text" size="2" maxlength="2" value="00" disabled/>
                </span>
                TO
                <span>
                    <input type="number" size="2" min="0" max="23" maxlength="2" value="@GetClosingTime("Wednesday")"
                           @onchange="@((ChangeEventArgs __e) => SetClosingTime("Wednesday", __e.Value))" />
                    : <input type="text" size="2" maxlength="2" value="00" disabled/>
                </span>
            </div>
        </div>
    </div>

    <div class="dayofweek">
        <div class="day">Thursday</div>
        <div class="times">
            <input type="checkbox" class="switch" checked="@WeekdayIsOpen("Thursday")"
                   @onchange="@((ChangeEventArgs __e) => HandleCheckboxChange("Thursday", __e.Value))">
            <div class="hours">
                <span>
                    <input type="number" size="2" min="0" max="23" maxlength="2" value="@GetOpeningTime("Thursday")"
                           @onchange="@((ChangeEventArgs __e) => SetOpeningTime("Thursday", __e.Value))" />
                    : <input type="text" size="2" maxlength="2" value="00" disabled/>
                </span>
                TO
                <span>
                    <input type="number" size="2" min="0" max="23" maxlength="2" value="@GetClosingTime("Thursday")"
                           @onchange="@((ChangeEventArgs __e) => SetClosingTime("Thursday", __e.Value))" />
                    : <input type="text" size="2" maxlength="2" value="00" disabled/>
                </span>
            </div>
        </div>
    </div>

    <div class="dayofweek">
        <div class="day">Friday</div>
        <div class="times">
            <input type="checkbox" class="switch" checked="@WeekdayIsOpen("Friday")"
                   @onchange="@((ChangeEventArgs __e) => HandleCheckboxChange("Friday", __e.Value))">
            <div class="hours">
                <span>
                    <input type="number" size="2" min="0" max="23" maxlength="2" value="@GetOpeningTime("Friday")"
                           @onchange="@((ChangeEventArgs __e) => SetOpeningTime("Friday", __e.Value))" />
                    : <input type="text" size="2" maxlength="2" value="00" disabled/>
                </span>
                TO
                <span>
                    <input type="number" size="2" min="0" max="23" maxlength="2" value="@GetClosingTime("Friday")"
                           @onchange="@((ChangeEventArgs __e) => SetClosingTime("Friday", __e.Value))" />
                    : <input type="text" size="2" maxlength="2" value="00" disabled/>
                </span>
            </div>
        </div>
    </div>

    <div class="dayofweek">
        <div class="day">Saturday</div>
        <div class="times">
            <input type="checkbox" class="switch" checked="@WeekdayIsOpen("Saturday")"
                   @onchange="@((ChangeEventArgs __e) => HandleCheckboxChange("Saturday", __e.Value))">
            <div class="hours">
                <span>
                    <input type="number" size="2" min="0" max="23" maxlength="2" value="@GetOpeningTime("Saturday")"
                           @onchange="@((ChangeEventArgs __e) => SetOpeningTime("Saturday", __e.Value))" />
                    : <input type="text" size="2" maxlength="2" value="00" disabled />
                </span>
                TO
                <span>
                    <input type="number" size="2" min="0" max="23" maxlength="2" value="@GetClosingTime("Saturday")"
                           @onchange="@((ChangeEventArgs __e) => SetClosingTime("Saturday", __e.Value))" />
                    : <input type="text" size="2" maxlength="2" value="00" disabled/>
                </span>
            </div>
        </div>
    </div>

</div>

@code {
    [Parameter]
    public List<RegularSchedule> regularSchedules { get; set; }

    [Parameter]
    public EventCallback<List<RegularSchedule>> updateServiceAvailibility { get; set; }

    private void HandleCheckboxChange(string day, object value)
    {
        var schedule = regularSchedules.Find(schedule => schedule.ByDay == day);

        if (schedule is null)
        {
            regularSchedules.Add(new RegularSchedule() { ByDay = day, Opens_At = new DateTime(1, 1, 1, 9, 0, 0), Closes_At = new DateTime(1, 1, 1, 17, 0, 0) });
            updateServiceAvailibility.InvokeAsync(regularSchedules);
        }
        else
        {
            regularSchedules.Remove(schedule);
            updateServiceAvailibility.InvokeAsync(regularSchedules);
        }
    }

    private bool WeekdayIsOpen(string weekDay)
    {
        var schedule = regularSchedules.Find(schedule => schedule.ByDay == weekDay);

        return schedule != null;
    }

    private int GetOpeningTime(string weekDay)
    {
        var schedule = regularSchedules.Find(schedule => schedule.ByDay == weekDay);

        if (schedule is null) { return 9; };

        return int.Parse(schedule.Opens_At.ToString("HH"));
    }

    private void SetOpeningTime(string weekDay, object time)
    {
        var schedule = regularSchedules.Find(schedule => schedule.ByDay == weekDay);

        schedule.Opens_At = new DateTime(1, 1, 1, int.Parse((string)time), 0, 0);
        updateServiceAvailibility.InvokeAsync(regularSchedules);

    }

    private int GetClosingTime(string weekDay)
    {
        var schedule = regularSchedules.Find(schedule => schedule.ByDay == weekDay);

        if (schedule is null) { return 9; };

        return int.Parse(schedule.Closes_At.ToString("HH"));
    }

    private void SetClosingTime(string weekDay, object time)
    {
        var schedule = regularSchedules.Find(schedule => schedule.ByDay == weekDay);

        schedule.Closes_At = new DateTime(1, 1, 1, int.Parse((string)time), 0, 0);
        updateServiceAvailibility.InvokeAsync(regularSchedules);
    }
}
