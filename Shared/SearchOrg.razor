
@using OpenReferralPOV.Data
@using OpenReferralPOV.Data.Requests
@using OpenReferralPOV.Services
@using Blazored.Typeahead

@inject IOpenReferralOrganisationService OrgService
@inject IOpenReferralMembershipRequestsService MembershipRequestService
@inject IOpenReferralKeyContactService KeyContactService
@inject IOpenReferralPlaylistService PlaylistService
@inject IOpenReferralServiceFilterService ServiceFilterService
@inject IOpenReferralService ServiceService

<div class="two-cols headspace">
    <div class="col col-sizer col-left">
        <EditForm Model="@request" OnValidSubmit="@HandleValidSubmit">

            <label for="search">Search for an organisation</label>
            <BlazoredTypeahead SearchMethod="SearchOrgs"
                               placeholder="Search by Org Name"
                               TItem="Organization"
                               TValue="Organization"
                               @bind-Value="request.Org"
                               id="search">
                <SelectedTemplate Context="org">
                    <text>@org.Name</text>
                </SelectedTemplate>
                <ResultTemplate Context="org">
                    @org.Name
                </ResultTemplate>
            </BlazoredTypeahead>
            <h4>Make me an admin</h4>
            <p>An admin has the ability to add/remove services and update all oragnisation information</p>
            <div>
                <label for="admin">Request admin rights</label>
                <InputCheckbox @bind-Value="@request.IsAdmin" id="admin" />
            </div>
            <button type="submit">Verify Association</button>
        </EditForm>
    </div>
    <div class="col col-sizer col-right">
        <h3>Who can add an organisation?</h3>
        <p>Info regarding who can add an organisation.</p>
        <NavLink href="add-organization">
            Add Organization
        </NavLink>
    </div>
</div>

@code {

    public OrgRequestToJoin request { get; set; } = new OrgRequestToJoin() { Org = new Organization() { Name = "Please start typing " } };
    private IEnumerable<Organization> organizations;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            organizations = await OrgService.GetAllOrganisations();
            var requests = await MembershipRequestService.GetAllMemebershipRequestsThatCanBeActioned();
            var keycontacts = await KeyContactService.GetOrgsICanManage();
            IsAPotentialMemberOfAtLeastOneOrg = requests.Any() &&
                requests.Any(request => request.Status != MembershipRequestsStatus.DENIED && request.Status != MembershipRequestsStatus.REQUESTED)
                || keycontacts.Count() > 0;
            isLoading = false;
        }
        catch (Exception)
        {
            organizations = new List<Organization>();
            isLoading = false;
        }

    }

    private async Task<IEnumerable<Organization>> SearchOrgs(string searchText)
    {
        organizations = await OrgService.GetAllOrganisations();
        return await Task.FromResult(organizations.Where(x => x.Name.ToLower().Contains(searchText.ToLower())).ToList());
    }


    private async Task HandleValidSubmit()
    {
        try
        {
            if (request.Org == null || request.Org.Id == null)
            {
                return;
            }
            if (request.IsAdmin)
            {
                await OrgService.RequestToJoinOrganisationAsAdmin(request.Org.Id);
                NewOrgRequest = true;
            }
            else
            {
                await OrgService.RequestToJoinOrganisationAsMember(request.Org.Id);
                NewOrgRequest = true;
            }

        }
        catch (HttpRequestException e)
        {
            httpError = e;
        }
        catch (Exception e)
        {
            Error.ProcessError(e);
        }
    }

}
