@page "/organizations"

@using OpenReferralPOV.Data
@using OpenReferralPOV.Services

@inject IOpenReferralOrganisationService OrgService
@inject IOpenReferralKeyContactService KeyContactService
@inject IOpenReferralMembershipRequestsService MembershipsService

<h1>Organizations</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (organizations == null)
{
    <p><em>Loading...</em></p>
}
else if (RequestSent)
{
    <h3><em>Request Sent.</em></h3>
}
else
{
    <p></p>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Charity Number</th>
                <th>Web Url</th>
                <th>Request to Join</th>
                <th>Request to Administer</th>
                @if (KeyContacts.Count() > 0)
                {
                    <th>Manage Org</th>
                }

            </tr>
        </thead>
        <tbody>
            @foreach (var org in organizations)
            {
                var isNotAMember = Memberships.Where(x => x.OrgId == org.Id && x.UserId == UserId).Count() == 0;
                var isNotAnAdmin = KeyContacts.Where(x => x.OrgId == org.Id).Count() == 0;
            <tr>
                <td>@org.Name</td>
                <td>@org.Description</td>
                <td>@org.CharityNumber</td>
                <td>@org.Url</td>

                @if (isNotAMember && isNotAnAdmin)
                {
                    <td>
                        <input type="button" name="Request to Join" class="btn-sml" disabled="@org.JoinAsMemberButtonDisabled" value="@org.RequestToJoinStatusMessage" @onclick="@(e => HandleRequestToJoin(org))" />
                    </td>
                }
                else
                {
                    <td></td>
                }

                @if (isNotAnAdmin)
                {
                    <td>
                        <input type="button" name="Request to Administer" class="btn-sml" disabled="@org.JoinAsAdminButtonDisabled" value="@org.RequestToAdminister" @onclick="@(e => HandleRequestToBecomeAdmin(org))" />
                    </td>
                    <td></td>
                }
                else
                {
                    <td></td>
                    <td>
                        <NavLink class="nav-link" href=@($"manage-organisation/{org.Id}")>
                            <span class="oi oi-list-rich" aria-hidden="true"></span> Manage Org
                        </NavLink>
                    </td>
                }
            </tr>
            }
        </tbody>
    </table>
}

@code {



private IEnumerable<Organization> organizations;
private IEnumerable<KeyContact> KeyContacts;
private IEnumerable<MembershipRequests> Memberships;
private System.Security.Claims.ClaimsPrincipal principal;
private string UserId { get; set; }
[CascadingParameter]
private Task<AuthenticationState> authState { get; set; }


private bool RequestSent;

protected async override void OnParametersSet()
{
    if (authState != null)
    {
        principal = (await authState).User;
        UserId = principal.Claims.First(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").Value;
    }
}

protected override async Task OnInitializedAsync()
{
    organizations = await OrgService.GetAllOrganisations();
    KeyContacts = await KeyContactService.GetOrgsICanManage();
    Memberships = await MembershipsService.GetMembersOfEachOrg();
    RequestSent = false;
}

protected async Task HandleRequestToJoin(Organization org)
{
    org.RequestToJoinStatusMessage = "Request Sent";
    org.JoinAsMemberButtonDisabled = true;
    await OrgService.RequestToJoinOrganisationAsMember(org.Id);
    RequestSent = true;
}

protected async Task HandleRequestToBecomeAdmin(Organization org)
{
    org.RequestToAdminister = "Request Sent";
    org.JoinAsAdminButtonDisabled = true;
    await OrgService.RequestToJoinOrganisationAsAdmin(org.Id);
    RequestSent = true;
}
}