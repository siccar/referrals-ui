@page "/services"

@using OpenReferralPOV.Data
@using OpenReferralPOV.Services
@using System.Linq;


@inject IOpenReferralService ReferralService
@inject IOpenReferralOrganisationService ReferralOrganisationService
@inject IOpenReferralKeyContactService KeyContactService

    <div class="content-container">
        <div class="gridder">

            <h3>Services</h3>


            <table class="table">
                <thead>
                    <tr>
                        <th>Service Name</th>
                        <th>Description</th>
                        <th>Org Name</th>
                        @if (KeyContacts.Count() > 0)
                        {
                            <th>Manage Services</th>
                        }
                    </tr>
                </thead>
                <tbody>

                    @foreach (var s in services)
                    {
                        var canManageService = KeyContacts.Where(x => x.OrgId == s.OrganizationId).Count() > 0;
                        <tr>
                            <td>@s.Name</td>
                            <td>@s.Description</td>
                            <td>@organizations.First(x => x.Id == s.OrganizationId).Name</td>
                            @if (canManageService)
                            {
                                <NavLink class="nav-link" href=@($"manage-service/{s.Id}")>
                                    <span class="oi oi-list-rich" aria-hidden="true"></span> Manage Service
                                </NavLink>
                            }
                        </tr>
                    }
                </tbody>
            </table>

            </div>
        </div>

            @code {
                private IEnumerable<Organization> organizations { get; set; } = new List<Organization>();
                private IEnumerable<Service> services { get; set; } = new List<Service>();
                private IEnumerable<KeyContact> KeyContacts { get; set; } = new List<KeyContact>();


                private System.Security.Claims.ClaimsPrincipal principal;
                private string UserId { get; set; }
                [CascadingParameter]
                private Task<AuthenticationState> authState { get; set; }


                protected async override void OnParametersSet()
                {
                    if (authState != null)
                    {
                        principal = (await authState).User;
                        UserId = principal.Claims.First(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").Value;
                    }
                }

                protected override async Task OnInitializedAsync()
                {

                    organizations = await ReferralOrganisationService.GetAllOrganisations();
                    services = await ReferralService.GetServicesAsync();
                    KeyContacts = await KeyContactService.GetOrgsICanManage();
                }
            }

