@page "/view-service/{Id}"
@using OpenReferralPOV.Data
@using OpenReferralPOV.Services

@inject IOpenReferralService ServiceService
@inject IOpenReferralOrganisationService OrgService
@inject NavigationManager NavManager


<div class="content-container">
    <div class="gridder">

        @if (loading)
        {
            <p><em>Loading...</em></p>
        }

        else
        {
            <div class="two-cols-70-30">
                <div class="serviceprovider">
                    <h3>Provided by: <NavLink href=@($"view-organisation/{serviceOrg.Id}")> @serviceOrg.Name</NavLink> </h3>
                    <h3>@service.Name</h3>
                    <div class="address">
                        <i class="fas fa-map-marker-alt"></i> <span>@address.Address_1, @address.City @address.Country, @address.Postal_Code</span>


                        <div class="mapouter">
                            <div class="gmap_canvas">
                                <iframe width="300" height="300" id="gmap_canvas" src="https://maps.google.com/maps?q=@address.Postal_Code&t=k&z=15&ie=UTF8&iwloc=&output=embed" frameborder="0" scrolling="no" marginheight="0" marginwidth="0">
                                </iframe>
                                <a href="https://fmovies2.org">fmovies</a><br>
                                <style>
                                    .mapouter {
                                        position: relative;
                                        text-align: right;
                                        height: 300px;
                                        width: 300px;
                                    }
                                </style>
                                <style>
                                    .gmap_canvas {
                                        overflow: hidden;
                                        background: none !important;
                                        height: 300px;
                                        width: 300px;
                                    }
                                </style>
                            </div>
                        </div>

                    </div>
                    <div class="contactinfo"><i class="fas fa-envelope-open-text"></i> <a href="mailto:@service.Email" title="Email @serviceOrg.Name">Email</a> <i class="fas fa-desktop"></i> <a href="@service.Url" target="_blank" title="Go to @serviceOrg.Name website">Visit the website</a></div>
                    <div class="serviceinfo">
                        <p><span>Service availability:</span> TBC</p>
                        <p><span>Closed:</span> TBC</p>
                    </div>
                    <div class="descn">
                        <p>@service.Description</p>
                    </div>
                    @if (@httpError != null)
                    {
                        <warn>There was an error.</warn>
                        <br />
                        <warn>@httpError.StatusCode - @httpError.Message</warn>
                    }

                </div>
                <div class="otherorgs">
                    <h3>Other services for this organisation</h3>
                    <ul>
                        @foreach (var service in services)
                        {
                            @if (service.Id != Id)
                            {
                                <li @onclick="@(() => NavManager.NavigateTo($"view-service/{service.Id}", true))">
                                    @service.Name
                                </li>
                            }
                        }
                    </ul>


                </div>
            </div>
        }
    </div>
</div>
@code {

    [CascadingParameter]
    Error Error { get; set; }
    HttpRequestException httpError { get; set; }
    [Parameter]
    public string Id { get; set; }

    public bool loading { get; set; } = true;

    public Service service { get; set; }
    public IEnumerable<Service> services { get; set; } = new List<Service>();
    public PhysicalAddress address;
    public PhysicalAddress originalAddress;
    public Organization serviceOrg;


    protected override async Task OnInitializedAsync()
    {
        service = await ServiceService.GetServiceById(Id);
        var location = await ServiceService.GetLocationById(service.Service_At_Locations.First().Location_Id);
        address = location.Physical_Addresses.First();


        serviceOrg = await OrgService.GetOrganisation(service.OrganizationId);

        services = (await ServiceService.GetServicesAsync()).Where(x => x.OrganizationId == service.OrganizationId);

        //Doing this to check if the postcode has changed.
        loading = false;
    }
}
