@page "/myrequests"

@using OpenReferralPOV.Data
@using OpenReferralPOV.Services

@inject IOpenReferralOrganisationService OrgService
@inject IOpenReferralMembershipRequestsService MembershipRequests
@inject IOpenReferralKeyContactService KeyContactRequests
@inject NavigationManager NavManager

<div class="content-container">
    <div class="gridder">

        <h1>Membership Requests</h1>

        @if (myrequeststojoin == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (ActionTaken)
        {
            <h3><em>Action submitted</em></h3>
            <a href="myrequests">Reload</a>
        }
        else
        {
            <p></p>
            <p></p>
            <p>My Requests to Join Organisations and there status</p>
            <table class="table">
                <thead>
                    <tr>
                        <th>Organisation</th>
                        <th>Request Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var membership in myrequeststojoin)
                    {
                        <tr>
                            <td>@organizations.First(x => x.Id == membership.OrgId).Name</td>
                            <td>@membership.Status</td>
                        </tr>
                    }
                </tbody>
            </table>
            <p></p>
            <p></p>
            <p>My Requests to Join Organisations as an admin</p>
            <table class="table">
                <thead>
                    <tr>
                        <th>Organisation</th>
                        <th>Request Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ar in myrequeststojoinAsAdmin)
                    {
                        <tr>
                            <td>@organizations.First(x => x.Id == ar.OrgId).Name</td>
                            <td>Pending</td>
                        </tr>
                    }
                </tbody>
            </table>
            <p></p>
            <p></p>
            <p>Join Requests for Orgs I am a Key Contact For</p>
            <table class="table">
                <thead>
                    <tr>
                        <th>Organisation</th>
                        <th>User Email</th>
                        <th>Accept</th>
                        <th>Reject</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var membership in joinRequestsICanAuthorise)
                    {
                        <tr>
                            <td>@organizations.First(x => x.Id == membership.OrgId).Name</td>
                            <td>@membership.Email</td>

                            <td>
                                <input type="button" name="Accept" class="button1" value="Accept" disabled="@membership.DisableButton" @onclick="@(e => HandleGrantRequest(membership))" />
                            </td>
                            <td>
                                <input type="button" name="Reject" class="button1" value="Reject" disabled="@membership.DisableButton" @onclick="@(e => HandleDenyRequest(membership))" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <p></p>
            <p></p>
            <p>Admin Requests for Orgs I am a Key Contact For</p>
            <table class="table">
                <thead>
                    <tr>
                        <th>Organisation</th>
                        <th>User Email</th>
                        <th>Accept / Reject</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ar in adminRequestsICanAuthorise)
                    {
                        <tr>
                            <td>@organizations.First(x => x.Id == ar.OrgId).Name</td>
                            <td>@ar.UserEmail</td>
                            <td>
                                <input type="button" name="Accept" class="button1" disabled="@ar.DisabledButton" value="Accept" @onclick="@(e => HandleAdminGrantRequest(ar))" />
                            </td>
                            <td>
                                <input type="button" name="Reject" class="button1" disabled="@ar.DisabledButton" value="Reject" @onclick="@(e => HandleAdminDenyGrantRequest(ar))" />

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            @if (@httpError != null)
            {
                <warn>There was an error submiting the form</warn>
                <br />
                <warn>@httpError.StatusCode</warn>
            }
        }

    </div>
</div>

@code {
    [CascadingParameter]
    Error Error { get; set; }
    HttpRequestException httpError { get; set; }

    private IEnumerable<Organization> organizations;
    private IEnumerable<MembershipRequests> myrequeststojoin;
    private IEnumerable<MembershipRequests> joinRequestsICanAuthorise;

    private IEnumerable<KeyContact> adminRequestsICanAuthorise;
    private IEnumerable<KeyContact> myrequeststojoinAsAdmin;
    private bool ActionTaken;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            organizations = await OrgService.GetAllOrganisations();
            myrequeststojoin = await MembershipRequests.GetAllMemebershipRequestsThatCanBeActioned();
            myrequeststojoinAsAdmin = await KeyContactRequests.GetOrgsIHaveRequestedToJoin();
            joinRequestsICanAuthorise = (await MembershipRequests.GetOrgJoinRequests());
            adminRequestsICanAuthorise = await KeyContactRequests.GetPendingAdminRequests();

            ActionTaken = false;
        }
        catch (HttpRequestException e)
        {
            httpError = e;
        }
        catch (Exception e)
        {
            Error.ProcessError(e);
        }
    }

    protected async Task HandleGrantRequest(MembershipRequests request)
    {
        try
        {
            request.DisableButton = true;
            await MembershipRequests.HandleGrantRequestForJoiningOrg(request);
            ActionTaken = true;
            NavManager.NavigateTo($"myrequests", true);

        }
        catch (HttpRequestException e)
        {
            httpError = e;
        }
        catch (Exception e)
        {
            Error.ProcessError(e);
        }
    }

    protected async Task HandleDenyRequest(MembershipRequests request)
    {
        try
        {
            request.DisableButton = true;
            await MembershipRequests.HandleDenyRequestForJoiningOrg(request);
            ActionTaken = true;
            NavManager.NavigateTo($"myrequests", true);


        }
        catch (HttpRequestException e)
        {
            httpError = e;
        }
        catch (Exception e)
        {
            Error.ProcessError(e);
        }
    }

    protected async Task HandleAdminGrantRequest(KeyContact kc)
    {
        try
        {
            kc.DisabledButton = true;
            await KeyContactRequests.HandleAdminGrantRequest(kc.OrgId, kc.UserId);
            ActionTaken = true;
            NavManager.NavigateTo($"myrequests", true);

        }
        catch (HttpRequestException e)
        {
            httpError = e;
        }
        catch (Exception e)
        {
            Error.ProcessError(e);
        }

    }

    protected async Task HandleAdminDenyGrantRequest(KeyContact kc)
    {
        try
        {
            kc.DisabledButton = true;
            await KeyContactRequests.HandleAdminDenyRequest(kc.OrgId, kc.UserId);
            ActionTaken = true;
            NavManager.NavigateTo($"myrequests", true);

        }
        catch (HttpRequestException e)
        {
            httpError = e;
        }
        catch (Exception e)
        {
            Error.ProcessError(e);
        }
    }
}
