@page "/myrequests"

@using OpenReferralPOV.Data
@using OpenReferralPOV.Services

@inject IOpenReferralOrganisationService OrgService
@inject IOpenReferralMembershipRequestsService MembershipRequests
@inject IOpenReferralKeyContactService KeyContactRequests

<div class="content-container">
    <div class="gridder">

        <h1>Membership Requests</h1>

        @if (myrequeststojoin == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (ActionTaken)
        {
            <h3><em>Action submitted</em></h3>
        }
        else
        {
            <p>My Requests to Join Organisations and there status</p>
            <table class="table">
                <thead>
                    <tr>
                        <th>Organisation</th>
                        <th>Request Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var membership in myrequeststojoin)
                    {
                        <tr>
                            <td>@organizations.First(x => x.Id == membership.OrgId).Name</td>
                            <td>@membership.Status</td>
                        </tr>
                    }
                </tbody>
            </table>

            <p>Join Requests for Orgs I am a Key Contact For</p>
            <table class="table">
                <thead>
                    <tr>
                        <th>Organisation</th>
                        <th>User Email</th>
                        <th>Accept</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var membership in joinRequestsICanAuthorise)
                    {
                        <tr>
                            <td>@organizations.First(x => x.Id == membership.OrgId).Name</td>
                            <td>@membership.Email</td>

                            <td>
                                <input type="button" name="Accept" class="button1" value="Accept" disabled="@membership.DisableButton" @onclick="@(e => HandleGrantRequest(membership))" />

                                <input type="button" name="Reject" class="button1" value="Reject" disabled="@membership.DisableButton" @onclick="@(e => HandleDenyRequest(membership))" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <p>Admin Requests for Orgs I am a Key Contact For</p>
            <table class="table">
                <thead>
                    <tr>
                        <th>Organisation</th>
                        <th>User Email</th>
                        <th>Accept / Reject</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ar in adminRequestsICanAuthorise)
                    {
                        <tr>
                            <td>@organizations.First(x => x.Id == ar.OrgId).Name</td>
                            <td>@ar.UserEmail</td>
                            <td>
                                <input type="button" name="Accept" class="button1" disabled="@ar.DisabledButton" value="Accept" @onclick="@(e => HandleAdminGrantRequest(ar))" />
                                <input type="button" name="Reject" class="button1" disabled="@ar.DisabledButton" value="Reject" @onclick="@(e => HandleAdminDenyGrantRequest(ar))" />

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </div>
</div>

@code {


    private IEnumerable<Organization> organizations;
    private IEnumerable<MembershipRequests> myrequeststojoin;
    private IEnumerable<MembershipRequests> joinRequestsICanAuthorise;

    private IEnumerable<KeyContact> adminRequestsICanAuthorise;
    private bool ActionTaken;


    protected override async Task OnInitializedAsync()
    {
        organizations = await OrgService.GetAllOrganisations();
        myrequeststojoin = await MembershipRequests.GetAllMemebershipRequestsThatCanBeActioned();
        joinRequestsICanAuthorise = (await MembershipRequests.GetOrgJoinRequests());
        adminRequestsICanAuthorise = await KeyContactRequests.GetPendingAdminRequests();

        ActionTaken = false;
    }

    protected async Task HandleGrantRequest(MembershipRequests request)
    {
        request.DisableButton = true;
        await MembershipRequests.HandleGrantRequestForJoiningOrg(request);
        ActionTaken = true;
    }

    protected async Task HandleDenyRequest(MembershipRequests request)
    {
        request.DisableButton = true;
        await MembershipRequests.HandleDenyRequestForJoiningOrg(request);
        ActionTaken = true;
    }

    protected async Task HandleAdminGrantRequest(KeyContact kc)
    {

        kc.DisabledButton = true;
        await KeyContactRequests.HandleAdminGrantRequest(kc.OrgId, kc.UserId);
        ActionTaken = true;
    }

    protected async Task HandleAdminDenyGrantRequest(KeyContact kc)
    {
        kc.DisabledButton = true;
        await KeyContactRequests.HandleAdminDenyRequest(kc.OrgId, kc.UserId);
        ActionTaken = true;
    }
}
