@page "/add-organization"

@using OpenReferralPOV.Data
@using OpenReferralPOV.Services
@using System.Net.Http

@inject IOpenReferralOrganisationService ReferralService
@inject NavigationManager NavManager


<div class="content-container">
    <div class="gridder">
        @if (orgCreated)
        {
            <StatusMessage messageType="success" message="Organisation created" />
            NavManager.NavigateTo($"manage-organisation/{organization.Id}", true);

        }
        else
        {

           

    <EditForm Model="@organization" OnValidSubmit="@HandleValidSubmit">

        <h2>Add Organisation</h2>
        @if (@httpError != null)
        {
            <HTTPErrorMessage message=@httpError.StatusCode.ToString() />
        }
        @if (validationError != null)
        {
            <ErrorValidationMessage Error=@validationError />
        }
        <DataAnnotationsValidator />

        <label for="Name">Name</label>
        <ValidationMessage For="@(() => organization.Name)" />
        <InputText id="Name" @bind-Value="@organization.Name" type="text" />

        <label for="Description">Description</label>
        <ValidationMessage For="@(() => organization.Description)" />
        <InputText id="Description" @bind-Value="@organization.Description" type="text" />

        <label for="Charity Number">Charity Number (Leave as zero if this doesn't apply to your organisation)</label>
        <InputNumber id="CharityNumber" @bind-Value="@organization.CharityNumber" />

        <label for="Url">URL</label>
        <ValidationMessage For="@(() => organization.Url)" />
        <InputText id="Url" @bind-Value="@organization.Url" type="text" />


        <button type="submit">Submit</button>
    </EditForm>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    Error Error { get; set; }
    HttpRequestException httpError { get; set; }
    ValidationError validationError { get; set; }
    public Organization organization { get; set; } = new Organization();
    public bool orgCreated { get; set; } = false;

    private async Task HandleValidSubmit()
    {
        try
        {
            httpError = null;
            validationError = null;
            organization = await ReferralService.AddOrganization(organization);
            orgCreated = true;
        }
        catch (ValidationError e)
        {
            validationError = e;
        }
        catch (HttpRequestException e)
        {
            httpError = e;
        }
        catch (Exception e)
        {
            Error.ProcessError(e);
        }
    }
}
