@page "/manage-organisation/{OrgId}"
@using OpenReferralPOV.Data
@using OpenReferralPOV.Services
@using System.Linq

@inject IOpenReferralOrganisationService OrgService
@inject IOpenReferralService ServiceService
@inject IOpenReferralMembershipRequestsService MemberService
@inject IOpenReferralKeyContactService KeyContactService
@inject NavigationManager NavManager
<div class="content-container">
    <div class="gridder">


        <h3>Manage Organization</h3>
        @if (orgUpdated)
        {
            <h3>Organization Updated</h3>
        }

        <EditForm Model="@organization" OnValidSubmit="@HandleValidSubmit">
            <label for="Name">Name</label>
            <InputText id="Name" @bind-Value="@organization.Name" />

            <label for="Description">Description</label>
            <InputText id="Description" @bind-Value="@organization.Description" />

            <label for="Charity Number">Charity Number</label>
            <InputNumber id="CharityNumber" @bind-Value="@organization.CharityNumber" />

            <label for="Url">Url</label>
            <InputText id="Url" @bind-Value="@organization.Url" />

            <DataAnnotationsValidator />
            <ValidationSummary />
            @if (@httpError != null)
            {
                <warn>There was an error.</warn>
                <br />
                <warn>@httpError.StatusCode - @httpError.Message</warn>
            }
            @if (validationError != null)
            {
                <ErrorValidationMessage Error=@validationError />
            }
            <button type="submit">Submit</button>
        </EditForm>

        <h3>Services</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Service Name</th>
                    <th>Service URL</th>
                    <th>Manage</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var service in Services)
                {
                    <tr>
                        <td>@service.Name</td>
                        <td>@service.Url</td>
                        <a class="" href="manage-service/@service.Id">Manage Service</a>
                    </tr>

                }
            </tbody>
        </table>
        <input type="button" name="AddService" class="button1" value="Add Service" @onclick="@(e => NavigateToAddService(organization.Id))" />

        <h3>Admins/Key Contacts of the Organisation</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>User Email</th>
                    <th>Remove</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var contact in keyContacts)
                {
                    <tr>
                        <td>@contact.UserEmail</td>
                        <td>
                            <input type="button" name="Reject" class="button1" value="Remove" @onclick="@(e => RemoveKeyContact(contact))" disabled="@contact.DisabledButton" />
                        </td>
                    </tr>

                }
            </tbody>
        </table>

        <p></p>
        <h3>Members of the  Organisation</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>User Email</th>
                    <th>Membership Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var member in Memberships)
                {
                    <tr>
                        <td>@member.Email</td>
                        <td>@member.Status</td>
                        <td>
                            <input type="button" name="Reject" class="button1" value="Remove" @onclick="@(e => HandleDenyRequest(member))" disabled="@member.DisableButton" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
</div>

@code {

    [CascadingParameter]
    Error Error { get; set; }
    HttpRequestException httpError { get; set; }
    ValidationError validationError { get; set; }
    [Parameter]
    public string OrgId { get; set; }

    public bool orgUpdated { get; set; } = false;

    public KeyContact keyContact { get; set; } = new KeyContact() { IsAdmin = true, IsPending = false };

    public Organization organization { get; set; } = new Organization();

    public IEnumerable<KeyContact> keyContacts = new List<KeyContact>();

    public IEnumerable<MembershipRequests> Memberships = new List<MembershipRequests>();

    public IEnumerable<Service> Services = new List<Service>();


    protected override async Task OnInitializedAsync()
    {
        organization = await OrgService.GetOrganisation(OrgId);
        keyContacts = await KeyContactService.GetKeyContactsForOrg(OrgId);
        Memberships = await MemberService.GetAllMembersOfOrg(OrgId);
        Services = (await ServiceService.GetServicesAsync()).Where(x => x.OrganizationId == OrgId);
    }

    protected async Task HandleDenyRequest(MembershipRequests request)
    {
        try
        {
            request.DisableButton = true;
            await MemberService.HandleDenyRequestForJoiningOrg(request);
        }
        catch (HttpRequestException e)
        {
            httpError = e;
        }
        catch (Exception e)
        {
            Error.ProcessError(e);
        }
    }

    private async Task RemoveKeyContact(KeyContact contact)
    {
        try
        {
            contact.DisabledButton = true;
            await KeyContactService.RemoveKeyContact(contact);
        }

        catch (HttpRequestException e)
        {
            httpError = e;
        }
        catch (Exception e)
        {
            Error.ProcessError(e);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            organization = await OrgService.UpdateOrganisation(organization);
            orgUpdated = true;
        }
        catch (ValidationError e)
        {
            validationError = e;
        }
        catch (HttpRequestException e)
        {
            httpError = e;
        }
        catch (Exception e)
        {
            Error.ProcessError(e);
        }
    }

    private async Task NavigateToAddService(string orgId)
    {
        NavManager.NavigateTo($"add-service/{orgId}");

    }
}
