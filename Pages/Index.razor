@page "/"

@using OpenReferralPOV.Data
@using OpenReferralPOV.Data.Requests
@using OpenReferralPOV.Services
@using Blazored.Typeahead

@inject IOpenReferralOrganisationService OrgService
@inject IOpenReferralMembershipRequestsService MembershipRequestService
@inject IOpenReferralKeyContactService KeyContactService
@inject IOpenReferralPlaylistService PlaylistService
@inject IOpenReferralServiceFilterService ServiceFilterService
@inject IOpenReferralService ServiceService  // This needs replaced with the service collection once its ine
<AuthorizeView>
    <Authorized Context="ctx">
        @if (IsAPotentialMemberOfAtLeastOneOrg)
        {
            <OpenReferralPOV.Pages.Playlists />
            return;
        }
        <div class="content-container">
            <div class="gridder">

                @if (isLoading)
                {
                    <h3><em>Loading.</em></h3>
                }
                else if (!NewOrgRequest)
                {
                    <SearchOrg IsAPotentialMemberOfAtLeastOneOrg="@IsAPotentialMemberOfAtLeastOneOrg" RequestSent="@UpdateNewRequest"/>
                }
                else
                {
                    <h3><em>Request Sent.</em></h3>
                }
                @if (@httpError != null)
                {
                    <warn>There was an error submiting the form</warn>
                    <br />
                    <warn>@httpError.StatusCode</warn>
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <SignedOutHome />
    </NotAuthorized>
</AuthorizeView>

@code {

    [CascadingParameter]
    Error Error { get; set; }
    private bool isLoading = true;
    private IEnumerable<Organization> organizations;
    private bool IsAPotentialMemberOfAtLeastOneOrg = false;
    private IEnumerable<MembershipRequests> MembershipRequests;
    HttpRequestException httpError { get; set; }
    public OrgRequestToJoin request { get; set; } = new OrgRequestToJoin() { Org = new Organization() { Name = "Please start typing " } };
    private bool NewOrgRequest;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            organizations = await OrgService.GetAllOrganisations();
            var requests = await MembershipRequestService.GetAllMemebershipRequestsThatCanBeActioned();
            var keycontacts = await KeyContactService.GetOrgsICanManage();
            IsAPotentialMemberOfAtLeastOneOrg = requests.Any() &&
                requests.Any(request => request.Status != MembershipRequestsStatus.DENIED && request.Status != MembershipRequestsStatus.REQUESTED)
                || keycontacts.Count() > 0;
            isLoading = false;
        }
        catch (Exception)
        {
            organizations = new List<Organization>();
            isLoading = false;
        }

    }

    private void UpdateNewRequest(bool NewRequest)
    {
        NewOrgRequest = NewRequest;
    }

}



