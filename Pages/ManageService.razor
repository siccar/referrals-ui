@page "/manage-service/{Id}"
@using OpenReferralPOV.Data
@using OpenReferralPOV.Services
@using OpenReferralPOV.Data.Enums

@inject IOpenReferralService ServiceService

<div class="content-container">
    <div class="gridder">
        @if (loading)
        {
            <p><em>Loading...</em></p>
        }
        else if (updatingService)
        {
            <p><em>Updating...</em></p>
        }
        else
        {
            <div class="two-cols">
                <div class="col col-sizer col-left">

                    <EditForm Model="@service" OnValidSubmit="@HandleValidSubmit">

                        <h3>Manage Service</h3>

                        @if (serviceUpdated)
                        {
                            <h3>Service Updated</h3>
                        }

                        <label for="Name">Name</label>
                        <InputText id="Name" @bind-Value="@service.Name" />

                        <label for="Description">Description</label>
                        <InputText id="Description" @bind-Value="@service.Description" />

                        <label for="Address">Address</label>
                        <InputText id="Address" @bind-Value="@service.Address" type="text" />

                        <label for="City">City</label>
                        <InputText id="City" @bind-Value="@address.City" type="text" />

                        <label for="County">County</label>
                        <InputText id="County" @bind-Value="@address.State_Province" type="text" />

                        <label for="PostCode">Post Code</label>
                        <InputText id="PostCode" @bind-Value="@service._Postcode" type="text" />

                        <label for="Email">Email</label>
                        <InputText id="Email" @bind-Value="@service.Email" type="text" />

                        <label for="Url">Url</label>
                        <InputText id="Url" @bind-Value="@service.Url" type="text" />

                        <table class="table">
                            <tbody>
                                @if (TagList.ToList().Count != 0)
                                {
                                    <tr>
                                        <td>Remove Tags</td>
                                        @foreach (var tag in TagList.ToList())
                                        {

                                            <td>
                                                <input type="button" name="Remove from ServiceTags" class="button2" value="@((TagEnum)tag)"
                                                       @onclick="@(e => RemoveFromServiceTags(tag))" />
                                            </td>

                                        }
                                    </tr>
                                }
                                <tr>
                                    <td>Add Tag</td>
                                    @foreach (var t in Tags)
                                    {
                                        <td>
                                            <input type="button" name="Add To ServiceTags" class="button1" value="@((TagEnum)t)"
                                                   @onclick="@(e => AddToServiceTags(t))" />
                                        </td>
                                    }
                                </tr>
                            </tbody>
                        </table>

                        <label for="Cat">Category</label>
                        <InputSelect @bind-Value="@service.Category" class="form-control">
                            @foreach (var cat in CategoryList)
                                {
                                    if ((int)cat == service.Category)
                                    {
                                        service.Category = (int)cat;
                                    <option value="@((int)cat)" selected>@cat</option>
                                    }
                                    else
                                    {
                                    <option value="@((int)cat)">@cat</option>
                                    }
                                }
                            }
                        </InputSelect>

                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        @if (@httpError != null)
                        {
                            <warn>There was an error submiting the form</warn>
                            <br />
                            <warn>@httpError.StatusCode</warn>
                        }
                        @if (validationError != null)
                        {
                            <ErrorValidationMessage Error=@validationError />
                        }
                        <button type="submit">Submit</button>
                    </EditForm>
                </div>
                <div class="col col-sizer col-right">
                    <ServiceAvailability regularSchedules="@service.Regular_Schedules.ToList()" updateServiceAvailibility="UpdateServiceAvailibility" />
                </div>
            </div>
        }
    </div>
</div>
@code {

    [CascadingParameter]
    Error Error { get; set; }
    HttpRequestException httpError { get; set; }
    ValidationError validationError { get; set; }
    [Parameter]
    public string Id { get; set; }

    public bool serviceUpdated { get; set; } = false;
    public bool updatingService { get; set; } = false;
    public bool loading { get; set; } = true;

    public Service service { get; set; }
    public PhysicalAddress address;
    public PhysicalAddress originalAddress;

    public int[] Tags = (int[])Enum.GetValues(typeof(TagEnum));
    public List<int> TagList { get; set; } = new List<int>();
    public int[] Category = (int[])Enum.GetValues(typeof(CategoryEnum));
    public List<CategoryEnum> CategoryList { get; set; } = new List<CategoryEnum>();

    protected override async Task OnInitializedAsync()
    {
        service = await ServiceService.GetServiceById(Id);
        var location = await ServiceService.GetLocationById(service.Service_At_Locations.First().Location_Id);
        address = location.Physical_Addresses.First();
        service._Postcode = address.Postal_Code;
        service.Address = address.Address_1;

        //Doing this to check if the postcode has changed.
        originalAddress = new PhysicalAddress { Postal_Code = address.Postal_Code };
        loading = false;

        TagList = service.Tags.ToList();

        foreach (var c in Category)
        {
            CategoryList.Add((CategoryEnum)c);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            updatingService = true;
            if (originalAddress.Postal_Code != service._Postcode)
            {
                var location = ServiceHelperFunctions.BuildLocation(service, address);
                location = await ServiceService.AddLocation(location);

                var serviceAtLocation = ServiceHelperFunctions.BuildServiceAtLocation(location, service);
                service.Service_At_Locations = new List<ServiceAtLocation> { serviceAtLocation };
            }
            service.Tags = TagList;
            service = await ServiceService.UpdateService(service);
            updatingService = false;
            serviceUpdated = true;
        }
        catch (ValidationError e)
        {
            updatingService = false;
            validationError = e;
        }
        catch (HttpRequestException e)
        {
            updatingService = false;
            httpError = e;
        }
        catch (Exception e)
        {
            updatingService = false;
            Error.ProcessError(e);
        }
    }

    private void UpdateServiceAvailibility(List<RegularSchedule> regularSchedules)
    {
        service.Regular_Schedules = regularSchedules;
    }

    private void AddToServiceTags(int tag)
    {
        if (!TagList.Contains(tag))
        {
            TagList.Add(tag);
        }
    }

    private void RemoveFromServiceTags(int tag)
    {
        TagList.Remove(tag);
    }
}
